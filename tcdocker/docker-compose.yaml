# 빌드용--------------------------------------------------------------------------------------------------------
version: "3.2"
services:
  web:
    container_name: tk_web
    build:
      context: ./web
      dockerfile: dockerfile
    image: kimgh5303/tk_web:tier
  was:
    container_name: tk_was
    restart: on-failure
    build:
      context: ./was
      dockerfile: dockerfile
    image: kimgh5303/tk_was:tier
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://192.168.40.2:3306/ticket?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "1234"
  proxy:
    build:
      context: ./proxy
      dockerfile: dockerfile
    image: kimgh5303/tk_proxy:tier
  dns:
    container_name: tk_dns
    build:
      context: ./dns
      dockerfile: dockerfile
    image: kimgh5303/tk_dns:tier
    ports:
      - "53:53/tcp"
      - "53:53/udp"

# 서버용--------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------
version: "3.2"
services:
  web:
    container_name: tk_web
    restart: always
    image: kimgh5303/tk_web:tier # 이전에 빌드된 이미지 사용
    ports:
      - "80:80" # 컨테이너의 80 포트를 호스트의 80 포트에 바인딩
    networks:
      - web # web 네트워크에 연결
    volumes:
      - ./web/nginx.conf:/etc/nginx/nginx.conf
      - ./web/default.conf:/etc/nginx/conf.d/default.conf
      - ./web/log:/var/log/nginx/
#---------------------------------------------
  was:
    container_name: tk_was
    image: kimgh5303/tk_was:tier # 이전에 빌드된 이미지 사용
    restart: on-failure
    ports:
      - "8080:8080" # 컨테이너의 8080 포트를 호스트의 8080 포트에 바인딩
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://192.168.40.10:3306/ticket?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
    networks:
      - web
      - was
    volumes:
      - /root/was/webapps:/usr/local/tomcat/webapps
      - /root/was/logs:/usr/local/tomcat/logs
      - /root/was/conf:/usr/local/tomcat/conf
#---------------------------------------------
  proxy:
    container_name: tk_proxy
    image: kimgh5303/tk_proxy:tier
    volumes:
      - squid_data:/var/spool/squid
    ports:
      - "3128:3128"
    restart: always
    networks:
      - root_default
#---------------------------------------------
  jenkins:
    image: kimgh5303/tk_jenkins:tier
    container_name: tk_jenkins
    user: root
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - "/home/jenkins:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - root_default
#---------------------------------------------
  dns:
    image: kimgh5303/tk_dns:tier
    container_name: tk_dns
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    networks:
      - root_default
#---------------------------------------------
networks:
  web:
    external: true
  was:
    external: true
  root_default:
    external: true
volumes:
  squid_data: {}